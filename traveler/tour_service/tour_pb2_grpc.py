# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import tour_pb2 as tour__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tour_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class TourServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllToursGuide = channel.unary_unary(
                '/tour_service.TourService/GetAllToursGuide',
                request_serializer=tour__pb2.GetAllToursGuideRequest.SerializeToString,
                response_deserializer=tour__pb2.TourList.FromString,
                _registered_method=True)
        self.CreateTour = channel.unary_unary(
                '/tour_service.TourService/CreateTour',
                request_serializer=tour__pb2.CreateTourRequest.SerializeToString,
                response_deserializer=tour__pb2.Tour.FromString,
                _registered_method=True)
        self.AddCheckpoint = channel.unary_unary(
                '/tour_service.TourService/AddCheckpoint',
                request_serializer=tour__pb2.AddCheckpointRequest.SerializeToString,
                response_deserializer=tour__pb2.AddCheckpointResponse.FromString,
                _registered_method=True)
        self.GetAllToursTourist = channel.unary_unary(
                '/tour_service.TourService/GetAllToursTourist',
                request_serializer=tour__pb2.GetAllToursTouristRequest.SerializeToString,
                response_deserializer=tour__pb2.TourList.FromString,
                _registered_method=True)
        self.DeleteTour = channel.unary_unary(
                '/tour_service.TourService/DeleteTour',
                request_serializer=tour__pb2.DeleteTourRequest.SerializeToString,
                response_deserializer=tour__pb2.DeleteTourResponse.FromString,
                _registered_method=True)


class TourServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAllToursGuide(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTour(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddCheckpoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllToursTourist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTour(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TourServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllToursGuide': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllToursGuide,
                    request_deserializer=tour__pb2.GetAllToursGuideRequest.FromString,
                    response_serializer=tour__pb2.TourList.SerializeToString,
            ),
            'CreateTour': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTour,
                    request_deserializer=tour__pb2.CreateTourRequest.FromString,
                    response_serializer=tour__pb2.Tour.SerializeToString,
            ),
            'AddCheckpoint': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCheckpoint,
                    request_deserializer=tour__pb2.AddCheckpointRequest.FromString,
                    response_serializer=tour__pb2.AddCheckpointResponse.SerializeToString,
            ),
            'GetAllToursTourist': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllToursTourist,
                    request_deserializer=tour__pb2.GetAllToursTouristRequest.FromString,
                    response_serializer=tour__pb2.TourList.SerializeToString,
            ),
            'DeleteTour': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTour,
                    request_deserializer=tour__pb2.DeleteTourRequest.FromString,
                    response_serializer=tour__pb2.DeleteTourResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tour_service.TourService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TourService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAllToursGuide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tour_service.TourService/GetAllToursGuide',
            tour__pb2.GetAllToursGuideRequest.SerializeToString,
            tour__pb2.TourList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTour(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tour_service.TourService/CreateTour',
            tour__pb2.CreateTourRequest.SerializeToString,
            tour__pb2.Tour.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddCheckpoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tour_service.TourService/AddCheckpoint',
            tour__pb2.AddCheckpointRequest.SerializeToString,
            tour__pb2.AddCheckpointResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllToursTourist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tour_service.TourService/GetAllToursTourist',
            tour__pb2.GetAllToursTouristRequest.SerializeToString,
            tour__pb2.TourList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTour(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tour_service.TourService/DeleteTour',
            tour__pb2.DeleteTourRequest.SerializeToString,
            tour__pb2.DeleteTourResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
